"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram –≥—Ä—É–ø–ø—É
"""

import aiohttp
import json
from typing import Optional, Dict, Any
from datetime import datetime
import os

class TelegramService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API"""
    
    def __init__(self, bot_token: Optional[str] = None, chat_id: Optional[str] = None):
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try:
            from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
            self.bot_token = bot_token or TELEGRAM_BOT_TOKEN
            self.chat_id = chat_id or TELEGRAM_CHAT_ID
        except ImportError:
            # Fallback –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
            self.bot_token = bot_token or os.getenv('TELEGRAM_BOT_TOKEN', '')
            self.chat_id = chat_id or os.getenv('TELEGRAM_CHAT_ID', '')
        
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
    
    async def send_message(self, text: str, parse_mode: str = "HTML") -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –≥—Ä—É–ø–ø—É"""
        if not self.bot_token or not self.chat_id:
            return {"success": False, "error": "Telegram bot not configured"}
        
        url = f"{self.base_url}/sendMessage"
        data = {
            "chat_id": self.chat_id,
            "text": text,
            "parse_mode": parse_mode
        }
        
        try:
            # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏
            import ssl
            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE
            
            connector = aiohttp.TCPConnector(ssl=ssl_context)
            async with aiohttp.ClientSession(connector=connector) as session:
                async with session.post(url, json=data) as response:
                    result = await response.json()
                    return {"success": response.status == 200, "result": result}
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    def format_feedback_message(self, feedback_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è Telegram"""
        user_info = feedback_data.get('user_info', {})
        page_info = feedback_data.get('page_info', {})
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        emoji_map = {
            'bug': 'üêõ',
            'feature': 'üí°', 
            'improvement': '‚ö°',
            'other': 'üìù'
        }
        
        feedback_type = feedback_data.get('type', 'other')
        emoji = emoji_map.get(feedback_type, 'üìù')
        
        message = f"""
{emoji} <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏</b>

üìã <b>–¢–∏–ø:</b> {feedback_data.get('type', '–î—Ä—É–≥–æ–µ').title()}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {feedback_data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üí° <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b> {feedback_data.get('suggestion', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>
‚Ä¢ –ò–º—è: {user_info.get('name', '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')}
‚Ä¢ Email: {user_info.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' if user_info.get('is_authenticated') else '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}

üåê <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞:</b>
‚Ä¢ URL: {page_info.get('url', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {page_info.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚Ä¢ –ë—Ä–∞—É–∑–µ—Ä: {page_info.get('user_agent', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚Ä¢ –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞: {page_info.get('screen_size', '–ù–µ —É–∫–∞–∑–∞–Ω')}

‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
"""
        
        return message.strip()
    
    async def send_feedback(self, feedback_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –≤ Telegram"""
        message = self.format_feedback_message(feedback_data)
        return await self.send_message(message)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
telegram_service = TelegramService() 