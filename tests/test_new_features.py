#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
"""

from db import SessionLocal
from models import User, Company, News, Job
from services.notifications import NotificationService, NotificationTemplates
from services.comments import CommentService, CommentValidator
from datetime import datetime

def test_notifications():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("üîî –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).first()
        if not user:
            print("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        print(f"üë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.email}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notifications = [
            NotificationService.create_notification(
                user_id=user.id,
                title="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ stanbase!",
                message="–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
                notification_type="success"
            ),
            NotificationService.create_notification(
                user_id=user.id,
                title="–ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è",
                message="–ö–æ–º–ø–∞–Ω–∏—è TechCorp –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª–∞ –Ω–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é: Senior Python Developer",
                notification_type="info",
                entity_type="job",
                entity_id=1
            ),
            NotificationService.create_notification(
                user_id=user.id,
                title="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏",
                message="–ö–æ–º–ø–∞–Ω–∏—è StartupXYZ –æ–±–Ω–æ–≤–∏–ª–∞ —Å–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
                notification_type="info",
                entity_type="company",
                entity_id=1
            )
        ]
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(notifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
        unread_count = NotificationService.get_unread_count(user.id)
        print(f"üìä –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {unread_count}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_notifications = NotificationService.get_user_notifications(user.id, limit=10)
        print(f"üìã –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {len(user_notifications)}")
        
        # –û—Ç–º–µ—á–∞–µ–º –æ–¥–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
        if user_notifications:
            first_notification = user_notifications[0]
            success = NotificationService.mark_as_read(first_notification.id, user.id)
            print(f"‚úÖ –û—Ç–º–µ—Ç–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ: {success}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            new_unread_count = NotificationService.get_unread_count(user.id)
            print(f"üìä –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ –æ—Ç–º–µ—Ç–∫–∏: {new_unread_count}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    finally:
        db.close()

def test_comments():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    print("\nüí¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).first()
        if not user:
            print("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é
        company = db.query(Company).first()
        if not company:
            print("‚ùå –ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        print(f"üë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.email}")
        print(f"üè¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {company.name}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        comments = [
            CommentService.create_comment(
                user_id=user.id,
                content="–û—Ç–ª–∏—á–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è! –û—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç.",
                entity_type="company",
                entity_id=company.id
            ),
            CommentService.create_comment(
                user_id=user.id,
                content="–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç.",
                entity_type="company",
                entity_id=company.id
            )
        ]
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        if comments:
            reply = CommentService.create_comment(
                user_id=user.id,
                content="–°–æ–≥–ª–∞—Å–µ–Ω! –û—Å–æ–±–µ–Ω–Ω–æ –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç –∏—Ö –ø–æ–¥—Ö–æ–¥ –∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é.",
                entity_type="company",
                entity_id=company.id,
                parent_id=comments[0].id
            )
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {reply.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
        company_comments = CommentService.get_comments("company", company.id, limit=10)
        print(f"üìã –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —É –∫–æ–º–ø–∞–Ω–∏–∏: {len(company_comments)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        comment_count = CommentService.get_comment_count("company", company.id)
        print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {comment_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å—É—â–Ω–æ—Å—Ç–∏
        is_valid = CommentValidator.is_valid_entity_type("company")
        print(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã–π —Ç–∏–ø 'company': {is_valid}")
        
        # –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å—É—â–Ω–æ—Å—Ç–∏
        is_invalid = CommentValidator.is_valid_entity_type("invalid_type")
        print(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–∏–ø 'invalid_type': {is_invalid}")
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        content_errors = CommentValidator.validate_content("")
        print(f"üìù –û—à–∏–±–∫–∏ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {content_errors}")
        
        content_errors = CommentValidator.validate_content("–°–ø–∞–º —Ä–µ–∫–ª–∞–º–∞ –∫—É–ø–∏—Ç—å")
        print(f"üìù –û—à–∏–±–∫–∏ –¥–ª—è —Å–ø–∞–º-—Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {content_errors}")
        
        content_errors = CommentValidator.validate_content("–û—Ç–ª–∏—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π!")
        print(f"üìù –û—à–∏–±–∫–∏ –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {content_errors}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
        import traceback
        traceback.print_exc()
    finally:
        db.close()

def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä—É–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã...")
    
    import requests
    
    base_url = "http://localhost:8000"
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π
    try:
        response = requests.get(f"{base_url}/api/v1/companies?limit=5")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ API –∫–æ–º–ø–∞–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç: –ø–æ–ª—É—á–µ–Ω–æ {len(data.get('companies', []))} –∫–æ–º–ø–∞–Ω–∏–π")
        else:
            print(f"‚ùå API –∫–æ–º–ø–∞–Ω–∏–π –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API –∫–æ–º–ø–∞–Ω–∏–π: {e}")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤
    try:
        response = requests.get(f"{base_url}/api/v1/investors?limit=5")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ API –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç: –ø–æ–ª—É—á–µ–Ω–æ {len(data.get('investors', []))} –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤")
        else:
            print(f"‚ùå API –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤: {e}")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π
    try:
        response = requests.get(f"{base_url}/api/v1/jobs?limit=5")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ API –≤–∞–∫–∞–Ω—Å–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç: –ø–æ–ª—É—á–µ–Ω–æ {len(data.get('jobs', []))} –≤–∞–∫–∞–Ω—Å–∏–π")
        else:
            print(f"‚ùå API –≤–∞–∫–∞–Ω—Å–∏–π –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API –≤–∞–∫–∞–Ω—Å–∏–π: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...\n")
    
    try:
        test_notifications()
        test_comments()
        test_api_endpoints()
        
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("\nüìã –†–µ–∑—é–º–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º, —á—Ç–µ–Ω–∏–µ–º –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ç–≤–µ—Ç–æ–≤")
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞")
        print("‚úÖ RESTful API –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π")
        print("‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        print("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc() 