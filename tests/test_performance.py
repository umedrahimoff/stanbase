#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è
"""

import time
import requests
from services.cache import cache_manager, QueryCache, CacheInvalidator
from services.pagination import PaginationHelper, DatabasePagination
from db import SessionLocal
from models import Company, Investor, News

def test_cache_performance():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    # –û—á–∏—â–∞–µ–º –∫–µ—à –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
    cache_manager.clear()
    
    # –¢–µ—Å—Ç 1: –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–±–µ–∑ –∫–µ—à–∞)
    print("\nüìä –¢–µ—Å—Ç 1: –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–±–µ–∑ –∫–µ—à–∞)")
    start_time = time.time()
    
    result1 = QueryCache.get_companies_with_filters(
        country="KZ",
        stage="seed",
        limit=20,
        offset=0
    )
    
    first_query_time = time.time() - start_time
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {first_query_time:.4f} —Å–µ–∫")
    print(f"üìã –ü–æ–ª—É—á–µ–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π: {len(result1['companies'])}")
    
    # –¢–µ—Å—Ç 2: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å (—Å –∫–µ—à–µ–º)
    print("\nüìä –¢–µ—Å—Ç 2: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å (—Å –∫–µ—à–µ–º)")
    start_time = time.time()
    
    result2 = QueryCache.get_companies_with_filters(
        country="KZ",
        stage="seed",
        limit=20,
        offset=0
    )
    
    cached_query_time = time.time() - start_time
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {cached_query_time:.4f} —Å–µ–∫")
    print(f"üìã –ü–æ–ª—É—á–µ–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π: {len(result2['companies'])}")
    
    # –í—ã—á–∏—Å–ª—è–µ–º —É—Å–∫–æ—Ä–µ–Ω–∏–µ
    if first_query_time > 0:
        speedup = first_query_time / cached_query_time
        print(f"‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.2f}x")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
    assert len(result1['companies']) == len(result2['companies'])
    print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")

def test_pagination_performance():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏...")
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        total_companies = db.query(Company).filter(Company.status == 'active').count()
        print(f"üìä –í—Å–µ–≥–æ –∫–æ–º–ø–∞–Ω–∏–π –≤ –±–∞–∑–µ: {total_companies}")
        
        # –¢–µ—Å—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
        page_sizes = [10, 20, 50, 100]
        
        for page_size in page_sizes:
            print(f"\nüìÑ –¢–µ—Å—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å —Ä–∞–∑–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_size}")
            
            start_time = time.time()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º DatabasePagination
            result = DatabasePagination.get_paginated_results(
                db.query(Company).filter(Company.status == 'active'),
                page=1,
                per_page=page_size
            )
            
            query_time = time.time() - start_time
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {query_time:.4f} —Å–µ–∫")
            print(f"üìã –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(result['items'])}")
            print(f"üìÑ –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {result['pages']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            assert len(result['items']) <= page_size
            assert result['total'] == total_companies
            
    finally:
        db.close()
    
    print("‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_cache_invalidation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–µ—à–∞"""
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–µ—à–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à–µ
    cache_manager.set("test_key", "test_value", ttl=3600)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å –≤ –∫–µ—à–µ
    cached_value = cache_manager.get("test_key")
    assert cached_value == "test_value"
    print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–µ—à")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—é
    CacheInvalidator.invalidate_companies()
    print("‚úÖ –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–µ—à–∞ –∫–æ–º–ø–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    
    CacheInvalidator.invalidate_all()
    print("‚úÖ –ü–æ–ª–Ω–∞—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–µ—à–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã
    cached_value_after = cache_manager.get("test_key")
    assert cached_value_after is None
    print("‚úÖ –ö–µ—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω")

def test_pagination_helper():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ö–µ–ª–ø–µ—Ä –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ö–µ–ª–ø–µ—Ä –ø–∞–≥–∏–Ω–∞—Ü–∏–∏...")
    
    # –¢–µ—Å—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    params = PaginationHelper.get_pagination_params(page=5, per_page=25)
    print(f"üìÑ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {params}")
    
    assert params['page'] == 5
    assert params['per_page'] == 25
    assert params['offset'] == 100
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    test_items = [f"item_{i}" for i in range(50)]
    pagination = PaginationHelper.create_pagination(
        items=test_items,
        total=100,
        page=2,
        per_page=20,
        request_url="/test",
        query_params={'filter': 'test'}
    )
    
    print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {pagination.get_pagination_info()}")
    print(f"üîó –°—Å—ã–ª–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {len(pagination.get_pagination_links())} —Å—Å—ã–ª–æ–∫")
    
    assert pagination.has_prev
    assert pagination.has_next
    assert pagination.pages == 5
    
    print("‚úÖ –•–µ–ª–ø–µ—Ä –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_cache_stats():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞"""
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    for i in range(5):
        cache_manager.set(f"test_key_{i}", f"test_value_{i}", ttl=3600)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = cache_manager.get_stats()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞: {stats}")
    
    assert stats['total_files'] >= 5
    assert stats['total_size_mb'] >= 0
    
    print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã (–µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω)"""
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã...")
    
    base_url = "http://localhost:8000"
    
    try:
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π —á–µ—Ä–µ–∑ API
        response = requests.get(f"{base_url}/api/v1/companies?limit=5", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ API –∫–æ–º–ø–∞–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç: –ø–æ–ª—É—á–µ–Ω–æ {len(data.get('companies', []))} –∫–æ–º–ø–∞–Ω–∏–π")
        else:
            print(f"‚ùå API –∫–æ–º–ø–∞–Ω–∏–π –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    try:
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ API
        response = requests.get(f"{base_url}/api/v1/investors?limit=5", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ API –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç: –ø–æ–ª—É—á–µ–Ω–æ {len(data.get('investors', []))} –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤")
        else:
            print(f"‚ùå API –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

def performance_benchmark():
    """–ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    db = SessionLocal()
    try:
        # –ë–µ–Ω—á–º–∞—Ä–∫ 1: –ó–∞–ø—Ä–æ—Å –±–µ–∑ –∫–µ—à–∞
        print("\nüìä –ë–µ–Ω—á–º–∞—Ä–∫ 1: –ó–∞–ø—Ä–æ—Å –±–µ–∑ –∫–µ—à–∞")
        start_time = time.time()
        
        companies = db.query(Company).filter(Company.status == 'active').limit(100).all()
        
        no_cache_time = time.time() - start_time
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ –∫–µ—à–∞: {no_cache_time:.4f} —Å–µ–∫")
        print(f"üìã –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(companies)}")
        
        # –ë–µ–Ω—á–º–∞—Ä–∫ 2: –ó–∞–ø—Ä–æ—Å —Å –∫–µ—à–µ–º
        print("\nüìä –ë–µ–Ω—á–º–∞—Ä–∫ 2: –ó–∞–ø—Ä–æ—Å —Å –∫–µ—à–µ–º")
        start_time = time.time()
        
        cached_result = QueryCache.get_companies_with_filters(limit=100, offset=0)
        
        cache_time = time.time() - start_time
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ —Å –∫–µ—à–µ–º: {cache_time:.4f} —Å–µ–∫")
        print(f"üìã –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(cached_result['companies'])}")
        
        # –í—ã—á–∏—Å–ª—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if no_cache_time > 0:
            improvement = ((no_cache_time - cache_time) / no_cache_time) * 100
            print(f"üìà –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {improvement:.1f}%")
        
    finally:
        db.close()

if __name__ == "__main__":
    print("üéØ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...\n")
    
    try:
        test_cache_performance()
        test_pagination_performance()
        test_cache_invalidation()
        test_pagination_helper()
        test_cache_stats()
        test_api_endpoints()
        performance_benchmark()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –†–µ–∑—é–º–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π:")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å TTL –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–æ–π")
        print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º")
        print("‚úÖ API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–µ—à–µ–º")
        print("‚úÖ –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–µ—à–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–µ—à–∞")
        print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc() 