#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

from utils.security import get_password_hash, verify_password, create_access_token, verify_token
from utils.csrf import get_csrf_token, verify_csrf_token, CSRFProtection
import time

def test_password_hashing():
    """–¢–µ—Å—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π"""
    print("üîê –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π...")
    
    password = "test123"
    hashed = get_password_hash(password)
    
    print(f"–ü–∞—Ä–æ–ª—å: {password}")
    print(f"–•–µ—à: {hashed}")
    print(f"–î–ª–∏–Ω–∞ —Ö–µ—à–∞: {len(hashed)}")
    print(f"–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å $2b$: {hashed.startswith('$2b$')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
    assert verify_password(password, hashed) == True
    print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
    assert verify_password("wrong", hashed) == False
    print("‚úÖ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    print("‚úÖ –¢–µ—Å—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π –ø—Ä–æ–π–¥–µ–Ω\n")

def test_jwt_tokens():
    """–¢–µ—Å—Ç JWT —Ç–æ–∫–µ–Ω–æ–≤"""
    print("üé´ –¢–µ—Å—Ç–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω—ã...")
    
    data = {"sub": "test@example.com", "role": "admin"}
    token = create_access_token(data)
    
    print(f"–î–∞–Ω–Ω—ã–µ: {data}")
    print(f"–¢–æ–∫–µ–Ω: {token[:50]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    payload = verify_token(token)
    assert payload is not None
    assert payload.get("sub") == "test@example.com"
    assert payload.get("role") == "admin"
    print("‚úÖ JWT —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–µ—Ç—Å—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω
    fake_payload = verify_token("fake_token")
    assert fake_payload is None
    print("‚úÖ –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    print("‚úÖ –¢–µ—Å—Ç JWT —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–æ–π–¥–µ–Ω\n")

def test_csrf_protection():
    """–¢–µ—Å—Ç CSRF –∑–∞—â–∏—Ç—ã"""
    print("üõ°Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º CSRF –∑–∞—â–∏—Ç—É...")
    
    csrf = CSRFProtection()
    user_id = 123
    session_id = "test_session_123"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    token = csrf.generate_token(user_id, session_id)
    print(f"User ID: {user_id}")
    print(f"Session ID: {session_id}")
    print(f"CSRF —Ç–æ–∫–µ–Ω: {token}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    assert csrf.verify_token(token, user_id, session_id) == True
    print("‚úÖ CSRF —Ç–æ–∫–µ–Ω –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω
    assert csrf.verify_token("fake_token", user_id, session_id) == False
    print("‚úÖ –ù–µ–≤–µ—Ä–Ω—ã–π CSRF —Ç–æ–∫–µ–Ω –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    assert csrf.verify_token(token, 999, session_id) == False
    print("‚úÖ CSRF —Ç–æ–∫–µ–Ω —Å –Ω–µ–≤–µ—Ä–Ω—ã–º user_id –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    print("‚úÖ –¢–µ—Å—Ç CSRF –∑–∞—â–∏—Ç—ã –ø—Ä–æ–π–¥–µ–Ω\n")

def test_password_migration():
    """–¢–µ—Å—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π"""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø–∞—Ä–æ–ª–µ–π...")
    
    from utils.migrate_passwords import is_hashed_password
    
    # –¢–µ—Å—Ç –Ω–µ—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
    plain_password = "test123"
    assert is_hashed_password(plain_password) == False
    print("‚úÖ –ù–µ—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
    hashed_password = get_password_hash(plain_password)
    assert is_hashed_password(hashed_password) == True
    print("‚úÖ –•–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    print("‚úÖ –¢–µ—Å—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π –ø—Ä–æ–π–¥–µ–Ω\n")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...\n")
    
    try:
        test_password_hashing()
        test_jwt_tokens()
        test_csrf_protection()
        test_password_migration()
        
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –†–µ–∑—é–º–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
        print("‚úÖ –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π —Å bcrypt")
        print("‚úÖ JWT —Ç–æ–∫–µ–Ω—ã –¥–ª—è API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        print("‚úÖ CSRF –∑–∞—â–∏—Ç–∞ –æ—Ç –º–µ–∂—Å–∞–π—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        print("‚úÖ –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ä–æ–ª–µ–π")
        print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc() 